
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__StreetlightProxy_h__PROXY_MARSHAL_H
#define __dbusxx__StreetlightProxy_h__PROXY_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace ch {
namespace bbv {
namespace StreetLight {

class Brightness_proxy
: public ::DBus::InterfaceProxy
{
public:

    Brightness_proxy()
    : ::DBus::InterfaceProxy("ch.bbv.StreetLight.Brightness")
    {
        connect_signal(Brightness_proxy, update, _update_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */

public:

    /* signal handlers for this interface
     */
    virtual void update(const double& value) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _update_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        double value;
        ri >> value;
        update(value);
    }
};

} } } 
namespace ch {
namespace bbv {
namespace StreetLight {

class Lamp_proxy
: public ::DBus::InterfaceProxy
{
public:

    Lamp_proxy()
    : ::DBus::InterfaceProxy("ch.bbv.StreetLight.Lamp")
    {
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void set(const double& value)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << value;
        call.member("set");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

} } } 
#endif //__dbusxx__StreetlightProxy_h__PROXY_MARSHAL_H
